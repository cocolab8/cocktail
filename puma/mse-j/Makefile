include ../../Makefile.config
INCDIR	= $(LIB)/include
CFLAGS	= -I$(INCDIR)
CC	= cc -m32 -O
CC	= cc -O
PUMA_OPT	= 

# To rebuild the test specs from the original XML, install Saxon 6.2.2 or
# later and put the name of saxon.jar here.
# See http://users.iclway.co.uk/mhkay/saxon/
SAXON	= /usr/lib/saxon/saxon622.jar

GSOURCES = Tree.java Defs.java Main.java

JSOURCES = $(GSOURCES)

test:	Main test.compiled
	Main > C_output
	java -classpath $(CLASSPATH):classes trafos.Main > Java_output
	diff C_output Java_output

all:
	rm -f Main.*
	make PUMA_OPT=
#	rm -f Main.*
#	make PUMA_OPT=b
	rm -f Main.*
	make PUMA_OPT=f
	rm -f Main.*
#	make PUMA_OPT=bf
#	rm -f Main.*
	make PUMA_OPT=n

C:	Main
	Main

Java:	test.compiled
	java -classpath $(CLASSPATH):classes trafos.Main

debug: test.compiled
	jdb -classpath $(CLASSPATH):classes trafos.Main

metric: Main.java
#	This target depends on having a version of puma with debugging
#	turned on for java.puma - see puma/src/Makefile.  It also depends to
#	some extent on having extra newlines inserted; add !//! to areas of
#	interest for best feedback on test coverage.
#	Generated source code contains line numbers in java.puma which generated
#	any particular line.  Build a file with all such numbers which could
#	be generated from the source code.  i.e. any line ending ! or @ which
#	is not a preprocessor directive.
	sed -n -e '/[!@]\#/  {d' -e '}' -e '/[!@]$$/ {=' -e '}' \
		< ../src/java.puma > src.lns
#
#	Now look at the actual generated code and extract all the line
#	numbers from that, for all possible options of puma.
#	(the edit should really be a macro, they are all the same).
#	This assumes real source code lines never end with something
#	like ":1234"
	rm -f Main.java
	make Main.java PUMA_OPT=
	sed -n -e '/:[0123456789]*$$/ {s/.*:\([0123456789]*$$\)/\1/p' -e '}' \
		< Main.java > scrap
#	rm -f Main.*
#	make Main.java PUMA_OPT=b
#	sed -n -e '/:[0123456789]*$$/ {s/.*:\([0123456789]*$$\)/\1/p' -e '}' \
#		< Main.java >> scrap
	rm -f Main.*
	make Main.java PUMA_OPT=f
	sed -n -e '/:[0123456789]*$$/ {s/.*:\([0123456789]*$$\)/\1/p' -e '}' \
		< Main.java >> scrap
#	rm -f Main.*
#	make Main.java PUMA_OPT=bf
#	sed -n -e '/:[0123456789]*$$/ {s/.*:\([0123456789]*$$\)/\1/p' -e '}' \
#		< Main.java >> scrap
	rm -f Main.*
	make Main.java PUMA_OPT=n
	sed -n -e '/:[0123456789]*$$/ {s/.*:\([0123456789]*$$\)/\1/p' -e '}' \
		< Main.java >> scrap
#	Use sort and unique to make a list of line numbers which have actually
#	generated an output line.
	cat scrap | sort -g | uniq > gen.lns
#	This finds those lines in java.puma which cannot be found in any test.
#	In other words, metric points at lines in java.puma which have not been
#	tested.  Ideally this should be empty, but currently it points at lines
#	to do with things not fully implemented, mostly ref/output arguments.
	sort -g -m src.lns gen.lns | uniq -u > metric

test.compiled:	$(JSOURCES) classes
	rm -f trees
	ln -s . trees
	javac -g -d classes -classpath $(CLASSPATH) $(JSOURCES)
	touch test.compiled

classes:
	mkdir classes

Tree.java TreeJava.TS:	treeJava.cg
	ast -Jdim4= treeJava.cg
	cp Tree.TS TreeJava.TS

Defs.java DefsJava.TS:	defsJava.cg
	ast -Jdim4 defsJava.cg
	cp Defs.TS DefsJava.TS

Main.java:	mainJava.pum TreeJava.TS DefsJava.TS
	cp TreeJava.TS Tree.TS
	cp DefsJava.TS Defs.TS
	puma -Jdik$(PUMA_OPT) mainJava.pum

Main:	Main.o Tree.o Defs.o
	$(CC) -o Main Main.o Tree.o Defs.o $(LIB)/libreuse.a

Tree.c Tree.h TreeC.TS:	treeC.cg
	ast -cdim4= treeC.cg
	cp Tree.TS TreeC.TS

Defs.c Defs.h DefsC.TS:	defsC.cg
	ast -cdim4 defsC.cg
	cp Defs.TS DefsC.TS

Main.h Main.c:	mainC.pum TreeC.TS DefsC.TS
	cp TreeC.TS Tree.TS
	cp DefsC.TS Defs.TS
	puma -cdik$(PUMA_OPT) mainC.pum

Main.o:	Defs.h Tree.h
Tree.o: Defs.h

mainJava.pum mainC.pum treeJava.cg treeC.cg defsJava.cg defsC.cg:\
		main.xml puma.xml tree.xml defs.xml cocktail.xsl code.xsl text_layout.xsl
	java -classpath $(SAXON):$(CLASSPATH) com.icl.saxon.StyleSheet main.xml cocktail.xsl

clean:
#	Note: the clean target does not remove the .pum and .cg specs
#	generated by Saxon from the XML.  This is in case Saxon is not
#	installed on your machine.  To remake all files it is sufficient
#	to touch main.xml.
	rm -f $(GSOURCES) *.TS
	rm -f core* *.dbg *.[hoc] *.lns
	rm -f test.compiled
	rm -rf classes Main trees

.c.o:
	$(CC) $(CFLAGS) -c $*.c
