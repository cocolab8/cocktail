TREE Defs

IMPORT {
# include "Idents.h"

namespace Tree {	// tricky, because Tree and Defs depend on each other
   typedef class yyTree * tTree;
}

using namespace Tree;
}

EXPORT {
# define NoEnv	  NoDefs

# define tObjects class Objects * /* type to represent sets of objects	*/
# define tEnv     class Env *	/* type to represent environments	*/

using namespace Defs;

extern tObjects Identify (register tIdent Ident, register tEnv Env);
			/* return the object associated with 'Ident' in	*/
			/* the environment 'Env'			*/

extern bool IsDeclared	(register tIdent Ident, register tObjects Objects);
			/* check whether an object having the name	*/
			/* 'Ident' is element of the set of declarations*/
			/* 'Objects'					*/

extern void mProc2	(register Proc3 * Object, int Level, int Label, int ParSize, int DataSize);
			/* extend the description 'Object' of a		*/
			/* procedure by the 4 given attributes		*/

extern void mVar2	(register Var3 * Object, int Level, int Offset);
			/* extend the description 'Object' of a		*/
			/* variable by the 2 given attributes		*/

extern bool IsObjectKind (register tObjects Object, short Kind);
			/* returns true if the kind of the 'Object'	*/
			/* is equal to parameter 'Kind'			*/

extern tTree GetFormals	(register tObjects Object);
			/* returns the list of formal parameters	*/
			/* from the description 'Object' of a procedure	*/

extern tTree GetType	(register tObjects Object);
			/* returns the type of the description 'Object'	*/
			/* of a variable				*/
}

GLOBAL {
# include "Idents.h"
# include "Tree.h"

using namespace Defs;

static NoObject * nNoObject;

bool IsDeclared (register tIdent Ident, register tObjects Objects)
   {
      while (Objects->Kind != kNoObject)
	 if (((Object *) Objects)->Ident == Ident) return true;
         else Objects = ((Object *) Objects)->Next;
      return false;
   }

tObjects Identify (register tIdent Ident, register tEnv Env)
   {
      while (Env != NoEnv) {
	 register tObjects Objects = Env->Objects;
	 while (Objects->Kind != kNoObject)
	    if (((Object *) Objects)->Ident == Ident) return Objects;
	    else Objects = ((Object *) Objects)->Next;
	 Env = Env->Hidden;
      }
      return nNoObject;
   }

void mProc2 (register Proc3 * Object, int Level, int Label, int ParSize, int DataSize)
   {
      Object->Level	= Level;
      Object->Label	= Label;
      Object->ParSize	= ParSize;
      Object->DataSize	= DataSize;
   }

void mVar2 (register Var3 * Object, int Level, int Offset)
   {
      Object->Level	= Level;
      Object->Offset	= Offset;
   }

bool IsObjectKind (register tObjects Object, short Kind)
   {
      return Object->Kind == Kind || Object->Kind == kNoObject;
   }

tTree GetFormals (register tObjects Object)
   {
      if (Object->Kind == kProc3) return ((Proc3 *) Object)->Formals;
      else return new NoFormal ();
   }

tTree GetType (register tObjects Object)
   {
      if (Object->Kind == kVar3) return ((Var3 *) Object)->Type;
      else return new NoType ();
   }
}

BEGIN { nNoObject = new NoObject (); }

RULE

Env		= Objects Hidden: Env .
Objects		= <
   NoObject	= .
   Object	= Next: Objects [Ident: tIdent] <
      Proc3	= [Formals: tTree] -> [Level: short] [Label] [ParSize] [DataSize] .
      Var3	= [Type: tTree] -> [Level: short] [Offset] .
   > .
> .
