CT_LIB	= "$(CT_DIR)"\lib
INCDIR	= $(CT_LIB)/cplusinc
CFLAGS	= /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_DEPRECATE /I$(INCDIR)
CPPC	= cl /nologo /MT
LDFLAGS	= $(CT_LIB)\librucpp.lib

SOURCES	= Scanner.h Scanner.cxx Parser.h Parser.cxx Tree.h Tree.cxx \
	  Semantic.h Semantic.cxx Types.h Types.cxx Defs.h Defs.cxx \
	  ICode.h ICode.cxx ICodeInt.h ICodeInt.cxx minilax.cxx

OBJS	= minilax.obj Scanner.obj Parser.obj Tree.obj \
	  Defs.obj Types.obj Semantic.obj ICode.obj ICodeInt.obj

all:	minilax
	if exist minilax.exe minilax < in1
	rem if test -f in5; then if exist minilax.exe minilax < in5; fi

minilax: $(OBJS)
	link /nologo /incremental:no /out:minilax.exe $(OBJS) $(LDFLAGS)

Scanner.rpp Parser.lrk: minilax.prs
	lpp -+xzj minilax.prs

minilax.rex: minilax.scn Scanner.rpp
	rpp < minilax.scn > minilax.rex

Scanner.h Scanner.cxx: minilax.rex
	rex -+d minilax.rex

Parser.h Parser.cxx: Parser.lrk
	lark -+dis Parser.lrk

Tree.h Tree.cxx: minilax.cg
	ast -+dimRDI0 minilax.cg

Semantic.h Semantic.cxx: minilax.cg
	ag -+DI0 minilax.cg

Defs.h Defs.cxx Defs.TS: Defs.cg
	ast -+dim4 Defs.cg

Tree.TS: minilax.cg
	echo SELECT AbstractSyntax Output > temp1
	copy /b temp1 + minilax.cg temp2
	ast -c4 temp2
	del temp1
	del temp2

Types.h Types.cxx: Types.pum Tree.TS
	puma -+dipku Types.pum

ICode.h ICode.cxx: ICode.pum Tree.TS Defs.TS
	puma -+diu ICode.pum

# dependencies

Defs.obj:		Defs.cxx Defs.h Tree.h Types.h ExtTree.h
ICode.obj:	ICode.cxx ICode.h Tree.h Defs.h Types.h ICodeInt.h
ICodeInt.obj:	ICodeInt.cxx ICodeInt.h
Parser.obj:	Parser.cxx Parser.h Scanner.h Tree.h Defs.h Types.h \
		ExtTree.h
Scanner.obj:	Scanner.cxx Scanner.h
Semantic.obj:	Semantic.cxx Semantic.h Tree.h Defs.h Types.h \
		ExtTree.h ExtDefs.h
Tree.obj:		Tree.cxx Tree.h Defs.h Types.h
Types.obj:	Types.cxx Types.h Tree.h Defs.h ExtTree.h
minilax.obj:	minilax.cxx Parser.h Scanner.h Tree.h Defs.h Types.h \
		ExtTree.h Semantic.h ExtDefs.h ICode.h ICodeInt.h

# tests

test:	$(SOURCES)
	cg -+dimRDI0 minilax.cg
	$(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	tcsh /c "if exist minilax.exe minilax < in5; time minilax < in5; time minilax < in5; time minilax < in5"
	wc Semantic.cxx
	size Semantic.obj
	cg -+dimRDI09 minilax.cg
	$(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	if exist minilax.exe minilax < in5
	cg -+dimRDI minilax.cg
	$(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	tcsh /c "if exist minilax.exe minilax < in5; time minilax < in5; time minilax < in5; time minilax < in5"
	wc Semantic.cxx
	size Semantic.obj
	cg -+dimRDI9 minilax.cg
	$(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	if exist minilax.exe minilax < in5
	cg -+dimRDIL minilax.cg
	$(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	tcsh /c "if exist minilax.exe minilax < in5; time minilax < in5; time minilax < in5; time minilax < in5"
	wc Semantic.cxx
	size Semantic.obj
	cg -+dimRDIL9 minilax.cg
	$(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	if exist minilax.exe minilax < in5
	cg -+dimRDIK minilax.cg
	$(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	tcsh /c "if exist minilax.exe minilax < in5; time minilax < in5; time minilax < in5; time minilax < in5"
	wc Semantic.cxx
	size Semantic.obj
	cg -+dimRDIK9 minilax.cg
	$(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	if exist minilax.exe minilax < in5

test2:	$(SOURCES)
	@ echo "*** expect compile errors at options IL,I,IL,IK: inconsistent options for ast and ag"
	cg -+dimRD	minilax.cg
	cg -+I		minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I0		minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	-cg -+IL	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	cg -+DIK	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+dimRD0	minilax.cg
	-cg -+I		minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	cg -+I0		minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	-cg -+IL	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	-cg -+DIK	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB)
	cg -+dimRDL	minilax.cg
	cg -+I		minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I0		minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+IL		minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+DIK	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1

trace:	$(SOURCES)
	cg -+dimRwDI09	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I09T	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I09YZ	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I09X	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I09Y	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I09Z	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+dimRwDI9	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I9T	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I9YZ	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I9X	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I9Y	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+I9Z	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+dimRwDIL9	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+IL9T	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+IL9YZ	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+IL9X	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+IL9Y	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+IL9Z	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+dimRwDIK9	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+IK9T	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+IK9YZ	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+IK9X	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+IK9Y	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1
	cg -+IK9Z	minilax.cg; $(MAKE) clean_bin minilax CT_LIB=$(CT_LIB); minilax < in1

.depend: $(SOURCES)
	gcc /I$(INCDIR) -MM $(SOURCES) | sed -e 's;/home/[^ ]*;;g' -e '/^ *.$$/d' > .depend

clean:
	del /F Scanner.*[hcx] Parser.*[hcx] Tree.*[hcx] Semantic.*[hcx] \
	   Defs.*[hcx] Types.*[hcx] ICode.*[hcx] *.TS yyNode .depend \
	   core* *.dbg minilax minilax.rex Parser.lrk Scanner.rpp yy*.h *.obj

clean_bin:
	del /F minilax *.obj

.SUFFIXES: .cxx .obj

.cxx.obj:
	$(CPPC) $(CFLAGS) /c $*.cxx
