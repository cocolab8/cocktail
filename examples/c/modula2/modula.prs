PREC
   NONE	'=' '#' '<' '<=' '>' '>=' 'IN'
   LEFT	'+' '-' OR
   LEFT	'*' '/' DIV MOD AND
   LEFT NOT

RULE

compilation_unit	= <
			= definition_module .
			= implementation_module .
			= program_module .
> .

/* basic items */

qualident		= <
			= Ident .
			= qualident '.' Ident .
> .
ident_list		= <
			= Ident .
			= ident_list ',' Ident .
> .

/* constant expressions */

constant_declaration	= Ident '=' expression .

/* data types */

type_declaration	= Ident '=' type .
type			= <
			= simple_type .
			= ARRAY simple_type_list OF type .
			= RECORD field_list_sequence 'END' .
			= SET OF simple_type .
			= POINTER TO type .
			= PROCEDURE .
			= PROCEDURE '(' ')' .
			= PROCEDURE '(' ')' ':' qualident .
			= PROCEDURE '(' formal_type_list ')' .
			= PROCEDURE '(' formal_type_list ')' ':' qualident .
> .
simple_type_list	= <
			= simple_type .
			= simple_type_list ',' simple_type .
> .
simple_type		= <
			= qualident .
			= '(' ident_list ')' .
			= '[' expression '..' expression ']' .
			= qualident '[' expression '..' expression ']' .
> .
field_list_sequence	= <
			= field_list .
			= field_list_sequence ';' field_list .
> .
field_list		= <
			= .
			= ident_list ':' type .
			= CASE       ':' qualident OF variant_list else_option_1 'END' .
			= CASE Ident ':' qualident OF variant_list else_option_1 'END' .
> .
else_option_1		= <
			= .
			= ELSE field_list_sequence .
> .
variant_list		= <
			= variant .
			= variant_list '|' variant .
> .
variant			= <
			= .
			= case_label_list ':' field_list_sequence .
> .
case_label_list		= <
			= case_labels .
			= case_label_list ',' case_labels .
> .
case_labels		= <
			= expression .
			= expression '..' expression .
> .
formal_type_list	= <
			= formal_type .
			= VAR formal_type .
			= formal_type_list ',' formal_type .
			= formal_type_list ',' VAR formal_type .
> .

/* variables */

variable_declaration	= ident_list ':' type .
designator		= <
			= qualident .
			= qualident selector_list .
> .
selector_list		= <
			= '[' exp_list ']' .
			= '^' .
			= selector_list '.' Ident .
			= selector_list '[' exp_list ']' .
			= selector_list '^' .
> .
/* .
selector_list		= <
			= .
			= selector_list '.' Ident .
			= selector_list '[' exp_list ']' .
			= selector_list '^' .
> .
*/

/* expressions */

exp_list		= <
			= expression .
			= exp_list ',' expression .
> .
expression		= <
			= expression '='  expression .
			= expression '#'  expression .
			= expression '<'  expression .
			= expression '<=' expression .
			= expression '>'  expression .
			= expression '>=' expression .
			= expression 'IN' expression .
			= 	     '+'  expression .
			= 	     '-'  expression .
			= expression '+'  expression .
			= expression '-'  expression .
			= expression OR   expression .
			= expression '*'  expression .
			= expression '/'  expression .
			= expression DIV  expression .
			= expression MOD  expression .
			= expression AND  expression .
			= 	     NOT  expression .
			= IntConst .
			= RealConst .
			= CharConst .
			= StringConst .
			= procedure_call .
			= '(' expression ')' .
			= '{' '}' .
			= '{' element_list '}' .
			= qualident '{' '}' .
			= qualident '{' element_list '}' .
> .
element_list		= <
			= element .
			= element_list ',' element .
> .
element			= <
			= expression .
			= expression '..' expression .
> .

/* statements */

statement		= <
			= .
			= designator ':=' expression .
			= procedure_call .
			= IF expression THEN statement_sequence elsif_list else_option_2 'END' .
			= CASE expression OF case_list else_option_2 'END' .
			= WHILE expression DO statement_sequence 'END' .
			= REPEAT statement_sequence UNTIL expression .
			= LOOP statement_sequence 'END' .
			= 'FOR' Ident ':=' expression TO expression DO statement_sequence 'END' .
			= 'FOR' Ident ':=' expression TO expression BY expression DO statement_sequence 'END' .
			= WITH designator DO statement_sequence 'END' .
			= EXIT .
			= RETURN .
			= RETURN expression .
> .
procedure_call		= <
			= designator .
			= designator '(' ')' .
			= designator '(' exp_list ')' .
> .
statement_sequence	= <
			= statement .
			= statement_sequence ';' statement .
> .
elsif_list		= <
			= .
			= elsif_list ELSIF expression THEN statement_sequence .
> .
else_option_2		= <
			= .
			= ELSE statement_sequence .
> .
case_list		= <
			= case .
			= case_list '|' case .
> .
case			= <
			= .
			= case_label_list ':' statement_sequence .
> .

/* subprograms */

procedure_declaration	= procedure_heading ';' block Ident .
procedure_heading	= <
			= PROCEDURE Ident .
			= PROCEDURE Ident '(' ')'  .
			= PROCEDURE Ident '(' ')' ':' qualident .
			= PROCEDURE Ident '(' f_p_section_list ')'  .
			= PROCEDURE Ident '(' f_p_section_list ')' ':' qualident .
> .
block			= <
			= declaration_list 'END' .
			= declaration_list 'BEGIN' statement_sequence 'END' .
> .
declaration_list	= <
			= .
			= declaration_list declaration .
> .
declaration		= <
			= CONST constant_declaration_list .
			= TYPE type_declaration_list .
			= VAR variable_declaration_list .
			= procedure_declaration ';' .
			= module_declaration ';' .
> .
constant_declaration_list = <
			= .
			= constant_declaration_list constant_declaration ';' .
> .
type_declaration_list	= <
			= .
			= type_declaration_list type_declaration ';' .
> .
variable_declaration_list = <
			= .
			= variable_declaration_list variable_declaration ';' .
> .
f_p_section_list	= <
			= f_p_section .
			= f_p_section_list ';' f_p_section .
> .
f_p_section		= <
			= ident_list ':' formal_type .
			= VAR ident_list ':' formal_type .
> .
formal_type		= <
			= qualident .
			= ARRAY OF qualident .
> .

/* modules */

module_declaration	= 'MODULE' Ident priority ';' import_list export block Ident .
priority		= <
			= .
			= '[' expression ']' .
> .
export			= <
			= .
			= 'EXPORT'           ident_list ';' .
			= 'EXPORT' QUALIFIED ident_list ';' .
> .
import_list		= <
			= .
			= import_list import .
> .
import			= <
			= 'IMPORT' ident_list ';' .
			= FROM Ident 'IMPORT' ident_list ';' .
> .
definition_module	= DEFINITION 'MODULE' Ident ';' import_list definition_list 'END' Ident '.' .
definition_list		= <
			= .
			= definition_list definition .
> .
definition		= <
			= CONST constant_declaration_list .
			= TYPE type_declaration_list_2 .
			= VAR variable_declaration_list .
			= procedure_heading ';' .
> .
type_declaration_list_2	= <
			= .
			= type_declaration_list_2 Ident ';' .
			= type_declaration_list_2 Ident '=' type ';' .
> .
program_module		= 'MODULE' Ident priority ';' import_list block Ident '.' .
implementation_module	= IMPLEMENTATION 'MODULE' Ident priority ';' import_list block Ident '.' .

Ident		: [Ident	: tIdent	] { Ident	:= NoIdent	; } .
IntConst	: [Integer	: int		] { Integer	:= 0		; } .
RealConst	: [Real		: double	] { Real	:= 0.0		; } .
CharConst	: [Char		: char		] { Char	:= '?'		; } .
StringConst	: [String	: tStringRef	] { String	:= PutString ("", 0); } .
