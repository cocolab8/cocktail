(* $Id: Errors.mi,v 1.15 2008/09/12 14:16:37 grosch rel $ *)

(*
 * $Log: Errors.mi,v $
 * Revision 1.15  2008/09/12 14:16:37  grosch
 * added functions GetCount, BeginErrors, CloseErrors
 *
 * Revision 1.14  2002/11/07 20:21:46  grosch
 * added "PrevLine = 0;" to function WriteMessages
 *
 * Revision 1.13  2002/08/02 15:29:02  grosch
 * added error ConfigureUnknownParam
 *
 * Revision 1.12  2002/07/18 20:09:23  grosch
 * eliminate duplicate messages
 *
 * Revision 1.11  2001/08/28 20:42:31  grosch
 * made ErrorTable a flexible array so any number of messages can be stored
 * added error TclTkError
 *
 * Revision 1.10  2000/09/04 13:01:17  grosch
 * added support for wide character strings
 *
 * Revision 1.9  2000/01/13 11:52:09  grosch
 * fixed bug in case of PrevLine=0 and Position=NoPosition
 * assign NoPosition to message "too many messages"
 *
 * Revision 1.8  1997/05/27 11:57:56  grosch
 * truncation of filenames to 8.3 format
 *
 * Revision 1.7  1996/01/17 10:39:43  grosch
 * turned BRIEF, FIRST, and TRUNCATE into regular variables
 *
 * Revision 1.2  1995/08/15  19:41:56  grosch
 * corrections because of purify
 *
 * Revision 1.1  1994/11/07  12:33:08  grosch
 * increased length of truncation from 25 to 32
 *
 * Revision 1.0  1994/11/07  12:30:42  grosch
 * Initial revision
 *
 * Revision 1.5  1994/08/15  22:13:23  grosch
 * small improvements to suppress useless information
 *
 * Revision 1.4  1994/06/16  19:07:12  grosch
 * added Writeflush
 *
 * Revision 1.3  1994/01/29  22:30:44  grosch
 * increased size of error storage
 * changed errors to messages
 *
 * Revision 1.2  1993/08/18  15:06:51  grosch
 * rename System and Memory to rSystem and rMemory
 *
 * Revision 1.1  1993/01/16  11:27:05  grosch
 * fixed bug INTEGER -> SHORTCARD, LONGINT
 *
 * Revision 1.0  1992/08/07  14:41:59  grosch
 * Initial revision
 *
 *)

(* Ich, Doktor Josef Grosch, Informatiker, Nov. 1994 *)

IMPLEMENTATION MODULE Errors;

FROM SYSTEM	IMPORT ADDRESS, TSIZE, ADR;
FROM rMemory	IMPORT Alloc;
FROM DynArray	IMPORT MakeArray, ExtendArray, ReleaseArray;
FROM IO		IMPORT tFile, StdError, WriteC, WriteNl, WriteS, WriteI, WriteN,
			WriteB, WriteR, WriteCard, WriteFlush, CloseIO;
FROM Layout	IMPORT WriteSpaces;
FROM Position	IMPORT tPosition, NoPosition, Compare, WritePosition;
FROM StringM	IMPORT tStringRef, tWStringRef, PutString, PutWString,
			GetString, GetWString;
FROM Strings	IMPORT tString, ArrayToString, StringToArray, Length, Char,
			Concatenate, Append;
FROM WStrings	IMPORT tWString, WCHAR;
FROM Idents	IMPORT tIdent, WriteIdent, MakeIdent, tWIdent, WriteWIdent,
			MakeWIdent;
FROM Sets	IMPORT tSet, WriteSet, Assign, MakeSet, Size;
FROM Sort	IMPORT Sort;

IMPORT rSystem, Strings, WStrings;

CONST InitMessageSize	= 128;
      cPosition		= Position;

TYPE tArray	= ARRAY [0..255] OF CHAR;

TYPE tError	= RECORD
				  Position	: tPosition	;
				  IsErrorCode	: BOOLEAN	;
				  ErrorNumber	: SHORTCARD	;
				  ErrorCode	: SHORTCARD	;
				  ErrorClass	: SHORTCARD	;
		     CASE	  InfoClass	: SHORTCARD	OF
		     | None	:
		     | Integer	: vInteger	: INTEGER	;
		     | Short	: vShort	: SHORTCARD	;
		     | Long	: vLong		: LONGINT	;
		     | Cardinal	: vCardinal	: CARDINAL	;
		     | Real	: vReal		: REAL		;
		     | Boolean	: vBoolean	: BOOLEAN	;
		     | Character: vCharacter	: CHAR		;
		     | WCharacter: vWCharacter	: WCHAR		;
		     | String	: vString	: tStringRef	;
		     | WString	: vWString	: tWStringRef	;
		     | Array	: vArray	: tStringRef	;
		     | Set	: vSet		: POINTER TO tSet;
		     | Ident	: vIdent	: tIdent	;
		     | WIdent	: vWIdent	: tWIdent	;
		     | Position	: vPosition	: tPosition	;
		     END;
		  END;

VAR
   MessagePtr	: POINTER TO ARRAY [0..1000000] OF tError;
   MessageSize	: LONGINT;
   MessageCount	: LONGINT;
   IsStore	: BOOLEAN;
   HandleMessage: PROCEDURE (BOOLEAN, CARDINAL, CARDINAL, tPosition, CARDINAL, ADDRESS);
   Out		: tFile;
   PrevLine	: SHORTCARD;
   FoundString	: tString;
   nErrors	: ARRAY [NoClass .. Information] OF CARDINAL;

PROCEDURE BeginErrors;
  VAR i: CARDINAL;
  BEGIN
    FOR i := NoClass TO Information DO nErrors [i] := 0; END;
    MessageCount := 0;
    PrevLine	 := 0;
  END BeginErrors;

PROCEDURE CloseErrors;
  BEGIN
    IF MessageSize > 0 THEN
      ReleaseArray (MessagePtr, MessageSize, TSIZE (tError));
      MessageSize := 0;
    END;
  END CloseErrors;

PROCEDURE ErrorMessage	(ErrorCode, ErrorClass: CARDINAL; Position: tPosition);
   BEGIN
      INC (nErrors [ErrorClass]);
      HandleMessage (TRUE, ErrorCode, ErrorClass, Position, None, NIL);
   END ErrorMessage;

PROCEDURE ErrorMessageI	(ErrorCode, ErrorClass: CARDINAL; Position: tPosition;
			 InfoClass: CARDINAL; Info: ADDRESS);
   BEGIN
      INC (nErrors [ErrorClass]);
      HandleMessage (TRUE, ErrorCode, ErrorClass, Position, InfoClass, Info);
   END ErrorMessageI;

PROCEDURE Message  (ErrorText: ARRAY OF CHAR; ErrorClass: CARDINAL; Position: tPosition);
   VAR String	: tString;
   BEGIN
      INC (nErrors [ErrorClass]);
      ArrayToString (ErrorText, String);
      HandleMessage (FALSE, MakeIdent (String), ErrorClass, Position, None, NIL);
   END Message;

PROCEDURE MessageI (ErrorText: ARRAY OF CHAR; ErrorClass: CARDINAL; Position: tPosition;
			 InfoClass: CARDINAL; Info: ADDRESS);
   VAR String	: tString;
   BEGIN
      INC (nErrors [ErrorClass]);
      ArrayToString (ErrorText, String);
      HandleMessage (FALSE, MakeIdent (String), ErrorClass, Position, InfoClass, Info);
   END MessageI;

PROCEDURE WriteHead (Position: tPosition; ErrorClass: CARDINAL);
   BEGIN
      IF Compare (Position, NoPosition) = 0 THEN
	 WriteSpaces (Out, 10);
      ELSE
	 WritePosition (Out, Position);
	 WriteS	(Out, ": ");
      END;
      CASE ErrorClass OF
      |  NoClass	: WriteS (Out, "            ");
      |  Fatal		: WriteS (Out, "Fatal       ");
      |  Restriction	: WriteS (Out, "Restriction ");
      |  Error		: WriteS (Out, "Error       ");
      |  Warning	: WriteS (Out, "Warning     ");
      |  Repair		: WriteS (Out, "Repair      ");
      |  Note		: WriteS (Out, "Note        ");
      |  Information	: WriteS (Out, "Information ");
      ELSE WriteS (Out, "Error class: "); WriteI (Out, ErrorClass, 0);
      END;
   END WriteHead;

PROCEDURE WriteCode (ErrorCode: CARDINAL);
   BEGIN
      CASE ErrorCode OF
      |  NoText		:
      |  SyntaxError	: WriteS (Out, "syntax error"		);
      |  ExpectedTokens	: WriteS (Out, "expected tokens"	);
      |  RestartPoint	: WriteS (Out, "restart point"		);
      |  TokenInserted	: WriteS (Out, "token inserted "	);
      |  WrongParseTable: WriteS (Out, "parse table mismatch"	);
      |  OpenParseTable	: WriteS (Out, "cannot open parse table");
      |  ReadParseTable	: WriteS (Out, "cannot read parse table");
      |  TooManyErrors	: WriteS (Out, "too many messages"	);
      |  TokenFound	: WriteS (Out, "token found    "	);
      |  FoundExpected	: WriteS (Out, "found/expected "	);
      |  TclTkError	: WriteS (Out, "Tcl/Tk "		);
      |  ConfigureUnknownParam
      			: WriteS (Out, "ConfigureTree: unknown parameter");
      ELSE WriteS (Out, " error code: "); WriteI (Out, ErrorCode, 0);
      END;
   END WriteCode;

PROCEDURE WriteInfo (InfoClass: CARDINAL; Info: ADDRESS);
   VAR
      PtrToInteger	: POINTER TO INTEGER;
      PtrToShort	: POINTER TO SHORTCARD;
      PtrToLong		: POINTER TO LONGINT;
      PtrToCardinal	: POINTER TO CARDINAL;
      PtrToReal		: POINTER TO REAL;
      PtrToBoolean	: POINTER TO BOOLEAN;
      PtrToCharacter	: POINTER TO CHAR;
      PtrToWCharacter	: POINTER TO WCHAR;
      PtrToString	: POINTER TO tString;
      PtrToWString	: POINTER TO tWString;
      PtrToArray	: POINTER TO tArray;
      PtrToSet		: POINTER TO tSet;
      PtrToIdent	: POINTER TO tIdent;
      PtrToWIdent	: POINTER TO tWIdent;
      PtrToPosition	: POINTER TO tPosition;
      string		: tString;
   BEGIN
      IF InfoClass = None THEN RETURN; END;
      WriteS (Out, ": ");
      CASE InfoClass OF
      | Integer	: PtrToInteger	:= Info; WriteI (Out, PtrToInteger^, 0);
      | Short	: PtrToShort	:= Info; WriteI (Out, PtrToShort^, 0);
      | Long	: PtrToLong	:= Info; WriteI (Out, PtrToLong^, 0);
      | Cardinal: PtrToCardinal	:= Info; WriteCard (Out, PtrToCardinal^, 0);
      | Real	: PtrToReal	:= Info; WriteR (Out, PtrToReal^, 1, 10, 1);
      | Boolean	: PtrToBoolean	:= Info; WriteB (Out, PtrToBoolean^);
      | Character:PtrToCharacter:= Info; WriteC (Out, PtrToCharacter^);
      | WCharacter:PtrToWCharacter:= Info;
				      IF PtrToWCharacter^ < 256 THEN
					 WriteC (Out, CHR (PtrToWCharacter^));
				      ELSE
					 WriteS (Out, "\u");
					 WriteN (Out, PtrToWCharacter^, 4, 16);
				      END;
      | String	: PtrToString	:= Info; WriteT (Out, PtrToString^);
      | WString	: PtrToWString	:= Info; WStrings.WriteS (Out, PtrToWString^);
      | Array	: PtrToArray	:= Info; ArrayToString (PtrToArray^, string);
					 WriteT (Out, string);
      | Set	: PtrToSet	:= Info; WriteSet (Out, PtrToSet^);
      | Ident	: PtrToIdent	:= Info; WriteIdent (Out, PtrToIdent^);
      | WIdent	: PtrToWIdent	:= Info; WriteWIdent (Out, PtrToWIdent^);
      | Position: PtrToPosition	:= Info; WritePosition (Out, PtrToPosition^);
      ELSE
      END;
   END WriteInfo;

PROCEDURE WriteT (File: tFile; String: tString);
   VAR
      l, i	: INTEGER;
      c		: CHAR;
   BEGIN
      IF TRUNCATE THEN
	 l := Length (String);
	 IF l <= 32 THEN
	    Strings.WriteS (File, String);
	 ELSE
	    FOR i := 1 TO 32 DO WriteC (File, Char (String, i)); END;
	    i := 32;
	    LOOP
	       INC (i);
	       IF i > l THEN EXIT; END;
	       c := Char (String, i);
	       IF c = ' ' THEN EXIT; END;
	       WriteC (File, c);
	    END;
	    IF i < l THEN WriteS (File, " ..."); END;
	 END;
      ELSE
	 Strings.WriteS (File, String);
      END;
   END WriteT;

PROCEDURE WriteMessage	(IsErrorCode: BOOLEAN; ErrorCode, ErrorClass: CARDINAL;
			 Position: tPosition; InfoClass: CARDINAL; Info: ADDRESS);
   VAR
      PtrToString	: POINTER TO tString;
   BEGIN
      IF IsErrorCode THEN
	 IF BRIEF THEN
	    CASE ErrorCode OF
	    | TokenFound	: PtrToString := Info;
				  Strings.Assign (FoundString, PtrToString^);
				  Append (FoundString, '/');
				  RETURN;
	    | SyntaxError	,
	      RestartPoint	,
	      TokenInserted	: RETURN;
	    | ExpectedTokens	: ErrorCode := FoundExpected;
				  ErrorClass := Error;
				  PtrToString := Info;
				  Concatenate (FoundString, PtrToString^);
				  Info := ADR (FoundString);
	    ELSE
	    END;
	 END;
	 IF FIRST AND (Position.Line # 0) THEN
	    IF Position.Line = PrevLine THEN RETURN; ELSE PrevLine := Position.Line; END;
	 END;
      END;
      WriteHead (Position, ErrorClass);
      IF IsErrorCode THEN WriteCode (ErrorCode); ELSE WriteIdent (Out, ErrorCode); END;
      WriteInfo (InfoClass, Info);
      WriteNl (Out); WriteFlush (Out);
      IF (ErrorClass = Fatal) AND NOT IsStore THEN Exit; END;
   END WriteMessage;

PROCEDURE WriteMessages	(File: tFile);
   VAR i	: LONGINT;
   VAR Info	: ADDRESS;
   VAR s	: tString;
   VAR t	: WStrings.tString;
   VAR PrevMsg	: POINTER TO tError;
   BEGIN
      Sort (1, MessageCount, IsLess, Swap);
      PrevLine := 0;
      Out := File;
      FOR i := 1 TO MessageCount DO
	 WITH MessagePtr^ [i] DO
	    CASE InfoClass OF
	    | Integer	: Info := ADR (vInteger	);
	    | Short	: Info := ADR (vShort	);
	    | Long	: Info := ADR (vLong	);
	    | Cardinal	: Info := ADR (vCardinal);
	    | Real	: Info := ADR (vReal	);
	    | Boolean	: Info := ADR (vBoolean	);
	    | Character	: Info := ADR (vCharacter);
	    | WCharacter: Info := ADR (vWCharacter);
	    | String	: GetString (vString, s); Info := ADR (s);
	    | WString	: GetWString (vWString, t); Info := ADR (t);
	    | Set	: Info :=      vSet	 ;
	    | Ident	: Info := ADR (vIdent	);
	    | WIdent	: Info := ADR (vWIdent	);
	    | cPosition	: Info := ADR (vPosition);
	    ELSE
			  Info := NIL;
	    END;
	    IF (i = 1) OR
	       (IsErrorCode	# PrevMsg^.IsErrorCode	) OR
	       (ErrorCode	# PrevMsg^.ErrorCode	) OR
	       (ErrorClass	# PrevMsg^.ErrorClass	) OR
	       (Compare (Position, PrevMsg^.Position) # 0) OR
	       (InfoClass	# PrevMsg^.InfoClass	) THEN
	       WriteMessage (IsErrorCode, ErrorCode, ErrorClass, Position, InfoClass, Info);
	       PrevMsg := ADR (MessagePtr^ [i]);
	    END;
	 END;
      END;
      Out := StdError;
   END WriteMessages;

PROCEDURE StoreMessage	(pIsErrorCode: BOOLEAN; pErrorCode, pErrorClass: CARDINAL;
			 pPosition: tPosition; pInfoClass: CARDINAL; pInfo: ADDRESS);
   VAR
      PtrToInteger	: POINTER TO INTEGER	;
      PtrToShort	: POINTER TO SHORTCARD	;
      PtrToLong		: POINTER TO LONGINT	;
      PtrToCardinal	: POINTER TO CARDINAL	;
      PtrToReal		: POINTER TO REAL	;
      PtrToBoolean	: POINTER TO BOOLEAN	;
      PtrToCharacter	: POINTER TO CHAR	;
      PtrToWCharacter	: POINTER TO WCHAR	;
      PtrToString	: POINTER TO tString	;
      PtrToWString	: POINTER TO tWString	;
      PtrToArray	: POINTER TO tArray	;
      PtrToSet		: POINTER TO tSet	;
      PtrToIdent	: POINTER TO tIdent	;
      PtrToWIdent	: POINTER TO tWIdent	;
      PtrToPosition	: POINTER TO tPosition	;
      s			: tString		;
   BEGIN
      INC (MessageCount);
      IF MessageCount >= MessageSize THEN
	 IF MessageSize = 0 THEN
	    MessageSize := InitMessageSize;
	    MakeArray (MessagePtr, MessageSize, TSIZE (tError));
	 ELSE
	    ExtendArray (MessagePtr, MessageSize, TSIZE (tError));
	 END;
      END;

      WITH MessagePtr^ [MessageCount] DO
	 Position	:= pPosition	;
	 IsErrorCode	:= pIsErrorCode	;
	 ErrorNumber	:= MessageCount	;
	 ErrorCode	:= pErrorCode	;
	 ErrorClass	:= pErrorClass	;
	 InfoClass	:= pInfoClass	;

	 CASE InfoClass OF
	 | Integer	: PtrToInteger	:= pInfo; vInteger	:= PtrToInteger	^;
	 | Short	: PtrToShort	:= pInfo; vShort	:= PtrToShort	^;
	 | Long		: PtrToLong	:= pInfo; vLong		:= PtrToLong	^;
	 | Cardinal	: PtrToCardinal	:= pInfo; vCardinal	:= PtrToCardinal^;
	 | Real		: PtrToReal	:= pInfo; vReal		:= PtrToReal	^;
	 | Boolean	: PtrToBoolean	:= pInfo; vBoolean	:= PtrToBoolean	^;
	 | Character	: PtrToCharacter:= pInfo; vCharacter	:= PtrToCharacter^;
	 | WCharacter	: PtrToWCharacter:= pInfo; vWCharacter	:= PtrToWCharacter^;
	 | String	: PtrToString	:= pInfo; vString	:= PutString (PtrToString^);
	 | WString	: PtrToWString	:= pInfo; vWString	:= PutWString (PtrToWString^);
	 | Array	: PtrToArray	:= pInfo; ArrayToString (PtrToArray^, s);
			  InfoClass	:= String;vArray	:= PutString (s);
	 | Set		: PtrToSet	:= pInfo; vSet		:= Alloc (TSIZE (tSet));
						  MakeSet (vSet^, Size (PtrToSet^));
						  Assign  (vSet^, PtrToSet^);
	 | Ident	: PtrToIdent	:= pInfo; vIdent	:= PtrToIdent	^;
	 | WIdent	: PtrToWIdent	:= pInfo; vWIdent	:= PtrToWIdent	^;
	 | cPosition	: PtrToPosition	:= pInfo; vPosition	:= PtrToPosition^;
	 ELSE
	 END;
      END;
      IF pErrorClass = Fatal THEN WriteMessages (StdError); Exit; END;
   END StoreMessage;

PROCEDURE IsLess (i, j: INTEGER): BOOLEAN;
   VAR r: INTEGER;
   BEGIN
      r := Compare (MessagePtr^ [i].Position, MessagePtr^ [j].Position);
      IF r = -1 THEN RETURN TRUE ; END;
      IF r = +1 THEN RETURN FALSE; END;
      RETURN MessagePtr^ [i].ErrorNumber < MessagePtr^ [j].ErrorNumber;
   END IsLess;

PROCEDURE Swap (i, j: INTEGER);
   VAR t: tError;
   BEGIN
      t := MessagePtr^ [i]; MessagePtr^ [i] := MessagePtr^ [j]; MessagePtr^ [j] := t;
   END Swap;

PROCEDURE StoreMessages (Store: BOOLEAN);
   BEGIN
      IF Store THEN
	 HandleMessage	:= StoreMessage;
	 MessageCount	:= 0;
	 PrevLine	:= 0;
      ELSE
	 HandleMessage	:= WriteMessage;
      END;
      IsStore := Store;
   END StoreMessages;

PROCEDURE GetCount (ErrorClass: CARDINAL): CARDINAL;
  BEGIN
    RETURN nErrors [ErrorClass];
  END GetCount;

PROCEDURE yyExit;
   BEGIN
      CloseIO; rSystem.rExit (1);
   END yyExit;

BEGIN
   Exit		:= yyExit;
   IsStore	:= FALSE;
   Out		:= StdError;
   HandleMessage:= WriteMessage;
   MessageSize	:= 0;
   MessageCount	:= 0;
   PrevLine	:= 0;
   BRIEF	:= TRUE;
   FIRST	:= TRUE;
   TRUNCATE	:= TRUE;
END Errors.
