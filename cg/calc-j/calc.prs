PARSER

IMPORT {
   import trees.Tree;
   import trees.Tree.*;
   import trees.Tree.Number;
   import de.cocolab.reuse.*;
}

EXPORT {
   public Tree tree;
}

LOCAL {
   int base = 10;
}

BEGIN {
#ifdef YYDEBUG
   yyDebug = true;
#endif
}

PREC
        LEFT    '+'     '-'
        LEFT    '*'     '/'     '%'
        LEFT    UNARY

PROPERTY INPUT


RULE

list    = stats {=>{
		tree = new Program ((Statements) stats:Stats.reverse ());
		Eval.eval (tree);
	};}.

stats   = <
	= { Stats := new NoStat (); }.
	= stats expr '.' { Stats := new Print (stats:Stats, expr:value); }.
	= stats LETTER '=' expr '.'
		{ Stats := new Assign (stats:Stats, LETTER:value, expr:value); }.
>.

expr    = <
	= '(' expr ')'		{ value := expr:value; }.
	= l:expr '+' r:expr	{ value := new Add (l:value, r:value); }.
        = l:expr '-' r:expr	{ value := new Subtract (l:value, r:value); }.
        = l:expr '*' r:expr	{ value := new Multiply (l:value, r:value); }.
        = l:expr '/' r:expr	{ value := new Divide (l:value, r:value); }.
        = l:expr '%' r:expr	{ value := new Remainder (l:value, r:value); }.
        = '-' PREC UNARY expr	{ value := new UMinus (expr:value); }.
        = LETTER		{ value := new Var (LETTER:value); }.
        = number		{ value := new Number (number:value); }.
>.

number  = <
	= DIGIT			{ value := {
				    if (DIGIT:value == 0) base = 8;
				    else base = 10; value = DIGIT:value;}; }.

        = number DIGIT		{ value := base * number:value + DIGIT:value; }.
>.

MODULE Att
PROPERTY SYN
DECLARE
  stats		= [ Stats: Statements ] .
  expr		= [ value: Expression ].
  number	= [ value ].
END Att

MODULE Terminals

PROPERTY INPUT

RULE

DIGIT	: $5 [ value: int ] { value := 99; }.

LETTER	: [ value: int ] { value := 25; }.

END Terminals

