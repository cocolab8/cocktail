.TH AST 1 "" "CoCoLab Germany"
.SH NAME
ast - generator for abstract syntax trees
.SH SYNOPSIS
ast [ -options ] ... [ +options ] [ -l\fIdirectory\fP ] [ \fIfiles\fP ]
.SH DESCRIPTION
.I Ast
generates a program module to handle arbitrary attributed trees and graphs.
A typical application is the abstract syntax tree in a compiler.
The input
.I file
contains a specification which describes the structure of all
possible trees or nodes respectively and the attributes of the nodes.
.I Ast
generates type declarations to implement the tree and several procedures for
tree manipulation including text and binary readers and writers
(see options below). If
.I file
is omitted the specification is read from standard input.
.SH OPTIONS
.ta 2.5i
.IP a
generate all except -ceh (default)
.IP n
generate node constructors	procedures n<node> (node)
.IP m
generate node constructors	procedures m<node> (make)
.IP f
generate node/graph destroyer	procedure ReleaseTREE (free)
.IP F
generate general destroyer	procedure ReleaseTREEModule (FREE)
.IP o
generate text node writer	procedure WriteTREENode (output)
.IP r
generate text graph reader	procedure ReadTREE
.IP w
generate text graph writer	procedure WriteTREE
.IP +X
generate XML graph writer	procedure WriteTREEXML
.IP g
generate binary graph reader	procedure GetTREE
.IP p
generate binary graph writer	procedure PutTREE
.IP t
generate top down traversal	procedure TraverseTREETD
.br
(reverse depth first)
.IP b
generate bottom up traversal	procedure TraverseTREEBU
.br
(depth first)
.IP R
generate list reverser	procedure ReverseTREE
.IP R
generate list iterator	procedure ForallTREE
.IP y
generate graph copy	procedure CopyTREE
.IP =
generate tree equality test	procedure IsEqualTREE
.IP k
generate graph type checker	procedure CheckTREE
.IP q
generate text graph browser	procedure QueryTREE
.IP e
generate graphic graph browser	procedure DrawTREE
.IP _
generate array TREE_NodeName
.IP d
generate header file or definition module
.IP i
generate implementation part or module
.IP s
generate import statements
.IP :
generate lines not longer than 80 characters
.IP 4
generate tree/graph description in file TREE.TS
.IP 6
generate # line directives
.IP 7
touch output files only if necessary
.IP 8
report storage consumption
.IP c
generate C source code (default: Modula-2)
.IP c+
generate simple C++ source code (using C data structure: union)
.IP c++
generate proper C++ source code (using C++ data structure: class)
.IP J
generate Java source code
.IP h
print help information
.IP -l\fIdir\fP
specify the directory dir where ast finds its tables
.IP +H
print advanced help
.IP +E
generate tree equality test procedure IsEqualTREE
.IP +I
suppress informations
.IP +P
generate empty bodies for procedures not selected
.SH FILES
.nf
.ta 2i
if output is in C:
.sp 0.5
<module>.h	header file of the generated graph module
<module>.c	body of the generated graph module
yy<module>.h	macro file defining type specific operations
Tree.tcl	procedure definitions for procedure DrawTREE
.sp 0.5
if output is in C++:
.sp 0.5
<module>.h	header file of the generated graph module
<module>.cxx	body of the generated graph module
yy<module>.h	macro file defining type specific operations
Tree.tcl	procedure definitions for procedure DrawTREE
.sp 0.5
if output is in Modula-2:
.sp 0.5
<module>.md	definition module of the generated graph module
<module>.mi	implementation module of the generated graph module
<module>.imp	import statements
Tree.tcl	procedure definitions for procedure DrawTREE
.sp 0.5
if output is in Java:
.sp 0.5
<module>.java	classes of the generated graph module
.fi
.SH SEE\ ALSO
.sp 0.5
J. Grosch: "Ast - A Generator for Abstract Syntax Trees",
CoCoLab Germany, Document No. 15
.sp 0.5
J. Grosch: "Tool Support for Data Structures",
Structured Programming, 12, 31-38 (1991)
.sp 0.5
J. Grosch: "Tool Support for Data Structures",
CoCoLab Germany, Document No. 17
