/* $Id: yacc.lrk,v 1.8 2016/04/22 07:32:30 grosch Exp $ */

/*
 * $Log: yacc.lrk,v $
 * Revision 1.8  2016/04/22 07:32:30  grosch
 * added handling of directives %code and %destructor
 * allow optional string after nonterminal 'nmno' (opt_string)
 *
 * Revision 1.7  2013/01/15 13:56:55  grosch
 * added handling of directive '%pure_parser'
 * make use of named constants for tokens
 *
 * Revision 1.6  2001/01/10 16:16:21  grosch
 * calmed down MSVC++
 *
 * Revision 1.5  1997/05/27 21:46:12  grosch
 * truncation of filenames to 8.3 format
 *
 * Revision 1.4  1997/01/20 11:24:55  grosch
 * calmed down warnings of MSVC++ 4.2
 *
 * Revision 1.3  1996/10/01  12:20:00  grosch
 * some bug fixes and improvements
 *
 * Revision 1.2  1995/12/15  11:27:50  grosch
 * added optional semicolons behind definitions
 *
 * Revision 1.1  1994/04/15  16:15:30  grosch
 * renamed true into rtrue
 *
 * Revision 1.0  1993/08/17  16:24:34  grosch
 * Initial revision
 *
 */

GLOBAL {
# include "ratc.h"

typedef union { tScanAttribute Scan; } tParsAttribute;

int rword;		/* 0 = %token, 1 = %oper, 2 = %type */
tStringRef lhs, tag, prec;
tStringRef left_str, right_str, none_str, colon_str, bar_str, action_str, prec_str, dot_str;
int has_rhs, has_action;
struct tCell default_action = { 0, 0 };
}

BEGIN {
left_str	= PutString ("\n\tLEFT", 6);
right_str	= PutString ("\n\tRIGHT", 7);
none_str	= PutString ("\n\tNONE", 6);
colon_str	= PutString ("\t:", 2);
bar_str		= PutString ("\t|", 2);
action_str	= PutString (" }}", 3);
prec_str	= PutString ("PREC", 4);
dot_str		= PutString ("\n\t.", 3);
default_action.car = action_str;
}

TOKEN
	identifier
	C_IDENT
	number
	string
	code_block
	'%%'
	'%code'
	'%destructor'
	'%expect'
	'%left'
	'%nonassoc'
	'%prec'
	'%pure_parser'
	'%right'
	'%start'
	'%token'
	'%type'
	'%union'
	','
	':'
	';'
	'<'
	'>'
	'{'
	'|'
	'}'

RULE	/* the grammar is taken from the yacc documentation */

spec	: def * '%%' { put_text (text_list); } rules { yacc_globals (); } [ '%%' ]
	.

def	: '%start' identifier opt_semicolon { start_symbol = $2.Scan.string; }
	| '%union' opt_semicolon
	| rword tag nlist opt_semicolon
	| '%expect' number opt_semicolon
	| '%pure_parser' opt_semicolon
	| '%code' identifier code_block opt_semicolon
	| '%destructor' code_block tag opt_semicolon
	.

rword	: '%token'	{ rword = 0; }
	| '%left'	{ rword = 1; put_oper (left_str); }
	| '%right'	{ rword = 1; put_oper (right_str); }
	| '%nonassoc'	{ rword = 1; put_oper (none_str); }
	| '%type'	{ rword = 2; type = 1; }
	.

tag	: '<' identifier '>' { tag = $2.Scan.string; }
	| { tag = 0; }
	.

nlist	: nmno
	| nlist nmno
	| nlist ',' nmno
	.

nmno	: identifier opt_string
	{ switch (rword) {
	  case 1 : put_oper ($1.Scan.string);
	  case 0 : put_token ($1.Scan.string, 0); break;
	  default: break;
	  }
	  if (tag) put_type ($1.Scan.string, tag);
	}

	| identifier number opt_string
	{ switch (rword) {
	  case 1 : put_oper ($1.Scan.string);
	  case 0 : put_token ($1.Scan.string, $2.Scan.number); break;
	  default: break;
	  }
	  if (tag) put_type ($1.Scan.string, tag);
	}
	.

opt_semicolon	:
	| ';'
	.

opt_string	:
	| string
	.

rules	: C_IDENT
	  { rule_elmts_list = NULL; prec = NULL; has_rhs = has_action = 0; lhs = $0.Scan.string;
	    put_lhs (lhs); put_delim (lhs); put_delim (colon_str); }
	  ':' rbody prec
	  { if (has_rhs && ! has_action) put_whole_action (& default_action, rtrue);
	    if (prec) { put_delim (prec_str); put_delim (prec); }
	    if (yyTerminal != t_bar) put_delim (dot_str);
	    put_rule (rule_elmts_list); put_text (text_list); }
	| rules rule
	.

rule	: C_IDENT
	  { rule_elmts_list = NULL; prec = NULL; has_rhs = has_action = 0; lhs = $0.Scan.string;
	    put_lhs (lhs); put_delim (lhs); put_delim (colon_str); }
	  ':' rbody prec
	  { if (has_rhs && ! has_action) put_whole_action (& default_action, rtrue);
	    if (prec) { put_delim (prec_str); put_delim (prec); }
	    if (yyTerminal != t_bar) put_delim (dot_str);
	    put_rule (rule_elmts_list); put_text (text_list); }
	| '|'
	  { rule_elmts_list = NULL; prec = NULL; has_rhs = has_action = 0;
	    put_lhs (lhs); put_delim (bar_str); }
	  rbody prec
	  { if (has_rhs && ! has_action) put_whole_action (& default_action, rtrue);
	    if (prec) { put_delim (prec_str); put_delim (prec); }
	    if (yyTerminal != t_bar) put_delim (dot_str);
	    put_rule (rule_elmts_list); put_text (text_list); }
	.

rbody	: rbody identifier { put_symbol ($2.Scan.string); has_rhs = 1; }
	| rbody act
	|
	.

(* actions are delivered in 2 tokens for the purpose of synchronisation *)

act	: '{' '}' { has_action = 1;
						/* is it last action ? */
		    put_whole_action ($2.Scan.action, (rbool) (has_rhs &
		    (yyTerminal == t_bar ||
		     yyTerminal == t_semicolon ||
		     yyTerminal == t__EOF_))); }
	.

prec	: '%prec' identifier     { prec = $2.Scan.string; }
	| '%prec' identifier act { prec = $2.Scan.string; }
	| prec ';'
	|
	.
